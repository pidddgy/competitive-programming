{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cppTemplate": {
		"prefix": "cppT",
		"scope": "cpp",
		"body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "// #define cerr if(false) cerr",
            "#define watch(x) cerr << (#x) << \" is \" << (x) << endl;",
            "#define endl '\\n'",
            "#define ld long double",
            "#define int long long",
            "#define pii pair<int, int>",
            "#define fi first",
            "#define se second",
            "#define sz(a) (int)(a).size()",
            "#define y1 lsdjkfhshfdsighoihweogihewoghi",
            "#define all(x) (x).begin(), (x).end()\n",
            "void solve() {",
            "\t",
            "}\n",
            "signed main() {",
            "\tios::sync_with_stdio(0);",
            "\tcin.tie(0);\n",
            "\t$0",
            "}",
            "\n/*\n",
            "*/\n",
            "// Did you read the bounds?",
            "// Did you make typos?",
            "// Are there edge cases (N=1?)",
            "// Are array sizes proper?",
            "// Integer overflow?",
            "// DS reset properly between test cases?",
            "// Is using long longs causing TLE?",
            "// Are you using floating points?\n",
		],
		"description": "C++ starter template"
    },

	"Fast Pragma": {
		"prefix": "pOpT",
		"scope": "cpp",
		"body": [
			"#pragma GCC optimize \"Ofast\"",
		],
		"description": "Set pragma optimization level to high"
    },

	"Watch": {
		"prefix": "watchT",
		"scope": "cpp",
		"body": [
			"#define watch(x) cerr << (#x) << \" is \" << (x) << endl;",
		],
		"description": "Debug variable"
	},

	"Compare": {
		"prefix": "compareT",
		"scope": "cpp",
		"body": [
			"struct Compare {",
			"\tbool operator()(${1:left}, ${2:right}) {",
			"\t\treturn ${3:condition} ",
			"\t}",
			"};",
        ],
		"description": "Return true if left should go before right",
    },

    "Pair Nacro": {
        "prefix": "pairT",
        "scope": "cpp",
        "body": [
            "#define ${1:} pair<${2:fi}, ${3:se}>",
            "#define fi first",
            "#define se second"
        ],
        "description": "Macro pair",
    },

    "mt19937": {
        "prefix": "randomT",
        "scope": "cpp",
        "body": [
            "auto seed = chrono::high_resolution_clock::now().time_since_epoch().count();",
            "mt19937 mt(seed);",
        ],
        "description": "mt19937 rng. ex: mt()%mod",
    },

    "Long Long Macro": {
        "prefix": "llT",
        "scope": "cpp",
        "body": [
            "#define ll long long",
        ],
        "description": "Macro ll to long long",
    },

    "Fast Modpow": {
        "prefix": "modpowT",
        "scope": "cpp",
        "body": [
            "int modpow(int a, int exp) {",
            "\tif(exp == 0) return 1;\n",
            "\tint t = modpow(a, exp / 2);",
            "\tif(exp % 2) return t*t % MOD * a%MOD;",
            "\treturn t*t % MOD;",
            "}"
        ],
        "description": "Fast mod pow",
    },

    "Mod Inverse": {
        "prefix": "modInvT",
        "scope": "cpp",
        "body": [
            "int modinv(int a) {",
            "\treturn modpow(a, MOD-2);",
            "}",
        ],
        "description": "Mod inverse of a",
    },

    "Mod N Choose K": {
        "prefix": "nkT",
        "scope": "cpp",
        "body": [
            "int nk(int n, int k) {",
            "\tif(n < k) return 0;",
            "\treturn (fac[n] * (modinv(fac[k])*modinv(fac[n-k]) % MOD)) % MOD;",
            "}",
        ],
        "description": "N choose K % MOD",
    },

    "Block Cerr": {
        "prefix": "cerrT",
        "scope": "cpp",
        "body": [
            "#define cerr if(false) cerr",
        ],
        "description": "Block all calls to cerr",
    },

    "GCD": {
        "prefix": "gcdT",
        "scope": "cpp",
        "body": [
            "int gcd(int a, int b) { return b ? gcd(b, a%b) : a; }",
        ],
        "description": "gcd",
    },

    "LCM": {
        "prefix": "lcmT",
        "scope": "cpp",
        "body": [
            "int lcm(int a, int b) { return a*b / gcd(a, b); }",
        ],
        "description": "lcm",
    },

    "set precision": {
        "prefix": "precisionT",
        "scope": "cpp",
        "body": [
            "cerr << fixed << setprecision(${1});",
            "cout << fixed << setprecision(${1});",
        ],
        "description": "precision",
    },

    "fast i/o": {
        "prefix": "scanT",
        "scope": "cpp",
        "body": [
            "#define scan(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)",
            "char _;"
        ],
        "description": "fast scan",
    },

    "usaco": {
        "prefix": "usacoT",
        "scope": "cpp",
        "body": [
            "freopen(\"${1}.in\", \"r\", stdin);",
            "freopen(\"${1}.out\", \"w\", stdout);"
        ],
        "description": "usaco input/output",
    }
}
